-- 02_Triggers_Functions_Procedures

-- Normalizza Partecipante/Chef con Username minuscolo, CodiceFiscale Maiuscolo, Email minuscolo, Nome e Cognome con l'iniziale Maiuscola

CREATE OR REPLACE FUNCTION fun_normalizza_utente()
RETURNS TRIGGER AS
$$
BEGIN
    NEW.Username := LOWER(NEW.Username);
    NEW.CodiceFiscale := UPPER(NEW.CodiceFiscale);
    NEW.Email := LOWER(NEW.Email);
    NEW.Nome := INITCAP(NEW.Nome);
    NEW.Cognome := INITCAP(NEW.Cognome);
    RETURN NEW;

END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_normalizza_partecipante
BEFORE INSERT OR UPDATE ON Partecipante
FOR EACH ROW
EXECUTE FUNCTION fun_normalizza_utente();

CREATE OR REPLACE TRIGGER trg_normalizza_chef
BEFORE INSERT OR UPDATE ON Chef
FOR EACH ROW
EXECUTE FUNCTION fun_normalizza_utente();


-- Normalizzo Ingrediente e Ricetta con l'iniziale del nome maiuscola

CREATE OR REPLACE FUNCTION fun_normalizza_ingr_chef()
RETURNS TRIGGER AS
$$
BEGIN
    NEW.Nome := INITCAP(NEW.Nome);
    RETURN NEW;

END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_normalizza_ingrediente
BEFORE INSERT OR UPDATE ON Ingrediente
FOR EACH ROW
EXECUTE FUNCTION fun_normalizza_ingr_chef();

CREATE OR REPLACE TRIGGER trg_normalizza_ricetta
BEFORE INSERT OR UPDATE ON Ricetta
FOR EACH ROW
EXECUTE FUNCTION fun_normalizza_ingr_chef();

-----------------------------------------------------------------------------------------------------------------------

-- Interrelazionale: Impedire che due utenti – uno Chef e uno Partecipante – abbiano lo stesso Username, anche se sono in due tabelle diverse.

CREATE OR REPLACE FUNCTION fun_username_unique()
RETURNS TRIGGER AS
$$
BEGIN
	IF TG_OP = 'UPDATE' AND NEW.Username = OLD.Username THEN			-- Ottimizzazione se è una update e lo username non cambia
    		RETURN NEW;
	END IF;

	IF TG_TABLE_NAME = 'Partecipante' THEN
    		IF EXISTS (SELECT 1 FROM Chef WHERE Username = NEW.Username) THEN
    			RAISE EXCEPTION 'Username già usato in Chef';
		END IF;
	END IF;
	
	IF TG_TABLE_NAME = 'Chef' THEN
		IF EXISTS (SELECT 1 FROM Partecipante WHERE Username = NEW.Username) THEN
    			RAISE EXCEPTION 'Username già usato in Partecipante';
		END IF;
	END IF;
	RETURN NEW;

END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_unico_username_partecipante
BEFORE INSERT OR UPDATE ON Partecipante 
FOR EACH ROW
EXECUTE FUNCTION fun_username_unique();

CREATE OR REPLACE TRIGGER trg_unico_username_chef
BEFORE INSERT OR UPDATE ON Chef 
FOR EACH ROW
EXECUTE FUNCTION fun_username_unique();

-----------------------------------------------------------------------------------------------------------------------

-- Interrelazionale: Non ci possono essere più sessioni per lo stesso corso nello stesso giorno

CREATE OR REPLACE FUNCTION fun_unicita_sessione_giorno()
RETURNS TRIGGER AS
$$
BEGIN
    	IF EXISTS ( SELECT 1 FROM SessioneOnline WHERE Data = NEW.Data AND IdCorso = NEW.IdCorso ) THEN
    		RAISE EXCEPTION 'C''è già una sessione online lo stesso giorno';
	END IF;

    	IF EXISTS ( SELECT 1 FROM SessionePratica WHERE Data = NEW.Data AND IdCorso = NEW.IdCorso) THEN
    		RAISE EXCEPTION 'C''è già una sessione pratica lo stesso giorno';
	END IF;
    	RETURN NEW;

END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_unicita_sessione_online_giorno
BEFORE INSERT OR UPDATE OF Data ON SessioneOnline
FOR EACH ROW
EXECUTE FUNCTION fun_unicita_sessione_giorno();

CREATE OR REPLACE TRIGGER trg_unicita_sessione_pratica_giorno
BEFORE INSERT OR UPDATE OF Data ON SessionePratica
FOR EACH ROW
EXECUTE FUNCTION fun_unicita_sessione_giorno();

-----------------------------------------------------------------------------------------------------------------------

-- Trigger aggiornamento numero utenti (increment)

CREATE OR REPLACE FUNCTION fun_incrementa_num_utenti()
RETURNS TRIGGER AS
$$    
BEGIN
    UPDATE SessionePratica
    SET NumeroPartecipanti = NumeroPartecipanti + 1
    WHERE IdSessionePratica = NEW.IdSessionePratica;
    RETURN NULL;

END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_incremento_numutenti
AFTER INSERT ON Adesioni
FOR EACH ROW
EXECUTE FUNCTION fun_incrementa_num_utenti();


-- Trigger aggiornamento numero utenti (decrement)

CREATE OR REPLACE FUNCTION fun_decrementa_num_utenti()
RETURNS TRIGGER AS
$$
BEGIN
	UPDATE SessionePratica
	SET NumeroPartecipanti = GREATEST(NumeroPartecipanti - 1, 0)
	WHERE IdSessionePratica = OLD.IdSessionePratica;
	RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_decrementa_num_utenti
AFTER DELETE ON Adesioni
FOR EACH ROW
EXECUTE FUNCTION fun_decrementa_num_utenti();

-----------------------------------------------------------------------------------------------------------------------

-- Trigger aggiornamento numero corsi(increment)

CREATE OR REPLACE FUNCTION fun_incrementa_num_corsi()
RETURNS TRIGGER AS
$$    
BEGIN
    UPDATE Partecipante
    SET NumeroCorsi = NumeroCorsi + 1
    WHERE IdPartecipante = NEW.IdPartecipante;
    RETURN NULL;

END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_incrementa_num_corsi
AFTER INSERT ON Iscrizioni
FOR EACH ROW
EXECUTE FUNCTION fun_incrementa_num_corsi();


-- Trigger aggiornamento numero corsi(decrement)

CREATE OR REPLACE FUNCTION fun_decrementa_num_corsi()
RETURNS TRIGGER AS
$$    
BEGIN
    UPDATE Partecipante
    SET NumeroCorsi = GREATEST(NumeroCorsi - 1, 0)
    WHERE IdPartecipante = OLD.IdPartecipante;
    RETURN OLD;

END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_decrementa_num_corsi
AFTER DELETE ON Iscrizioni
FOR EACH ROW
EXECUTE FUNCTION fun_decrementa_num_corsi();

-----------------------------------------------------------------------------------------------------------------------

-- Interrelazionale: La data dell'adesione alla sessione pratica deve essere antecedente alla data della sessione pratica/ Se la sessione pratica è già avvenuta, l'utente non puo' più aderire

CREATE OR REPLACE FUNCTION fun_data_adesione()
RETURNS TRIGGER AS
$$
DECLARE
    	Data_Sessione SessionePratica.Data%TYPE;

BEGIN

    	SELECT Data INTO Data_Sessione
    	FROM SessionePratica
    	WHERE IdSessionePratica = NEW.IdSessionePratica;

    	IF NEW.DataAdesione >= Data_Sessione  THEN
        	RAISE EXCEPTION 'L'' adesione deve essere antecedente alla data della sessione pratica';
    	END IF;
    	RETURN NEW;

END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_data_adesione
BEFORE INSERT OR UPDATE ON Adesioni
FOR EACH ROW
EXECUTE FUNCTION fun_data_adesione();

-----------------------------------------------------------------------------------------------------------------------

-- Interrelazionale: Se viene inserita una partecipazione ma il limite di iscrizioni è già raggiunto, essa non viene inserita

CREATE OR REPLACE FUNCTION fun_limite_iscrizioni()
RETURNS TRIGGER AS
$$
DECLARE
    	numero_iscritti INTEGER;
    	limite_corso Corso.Limite%TYPE;
	pratico Corso.isPratico%TYPE;
BEGIN
	
	SELECT Limite, isPratico INTO limite_corso, pratico
    	FROM Corso
    	WHERE IdCorso = NEW.IdCorso;

	IF pratico THEN
    		SELECT COUNT(*) INTO numero_iscritti
    		FROM Iscrizioni
    		WHERE IdCorso = NEW.IdCorso;
    	
    		IF numero_iscritti >= limite_corso THEN
        		RAISE EXCEPTION 'Il limite delle iscrizioni per il corso è stato già raggiunto';
    		END IF;
	END IF;
    	RETURN NEW;

END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_limite_iscrizioni 
BEFORE INSERT OR UPDATE ON Iscrizioni
FOR EACH ROW
EXECUTE FUNCTION fun_limite_iscrizioni();


-----------------------------------------------------------------------------------------------------------------------
--- Stesso chef -> piu corsi -> controllare che le sessioni non siano nella stessa fascia oraria

CREATE OR REPLACE FUNCTION fun_controlla_sovrapposizione_oraria()
RETURNS TRIGGER AS
$$
DECLARE
	chef Chef.IdChef%TYPE;
	inizio_nuova TIME := NEW.Ora;
	fine_nuova TIME := (NEW.Ora + (NEW.Durata || ' minutes')::interval)::time;
BEGIN
	SELECT IdChef INTO chef FROM Corso WHERE IdCorso = NEW.IdCorso;

	IF EXISTS 
		 	  (
				SELECT 1 FROM 
				(
					SELECT SP.Data, SP.Ora, SP.Durata, C.IdChef, SP.IdSessionePratica AS IdSessione
					FROM SessionePratica SP JOIN Corso C ON SP.IdCorso = C.IdCorso
					WHERE C.IdChef = chef AND SP.Data = NEW.Data
					UNION ALL
					SELECT SO.Data, SO.Ora, SO.Durata, C.IdChef, SO.IdSessioneOnline AS IdSessione
					FROM SessionePratica SO JOIN Corso C ON SO.IdCorso = C.IdCorso
					WHERE C.IdChef = chef AND SO.Data = NEW.Data
				 ) AS S
				WHERE S.IdSessione <> COALESCE(NEW.IdSessionePratica, NEW.IdSessioneOnline, -1)
						AND NOT 
								    (
									    (S.Ora + (S.Durata || ' minutes')::interval)::time <= inizio_nuova)	 OR (S.Ora >= fine_nuova)							
								    )
			 ) THEN
				RAISE EXCEPTION 'Sovrapposizione oraria con altra sessione dello stesso chef');
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;
			

CREATE OR REPLACE TRIGGER trg_sovrapposizione_orario_sessione_pratica
BEFORE INSERT OR UPDATE OF Data, Ora, Durata ON SessionePratica
FOR EACH ROW
EXECUTE FUNCTION fun_controlla_sovrapposizione_orario_sessione();


CREATE OR REPLACE TRIGGER trg_sovrapposizione_orario_sessione_online
BEFORE INSERT OR UPDATE OF Data, Ora, Durata ON SessioneOnline
FOR EACH ROW
EXECUTE FUNCTION fun_controlla_sovrapposizione_orario_sessione();

-----------------------------------------------------------------------------------------------------------------------

-- La data della sessione non puo essere prima della data inizio corso e se non ci sono sessioni allora deve essere inserita il giorno di inizio corso

CREATE OR REPLACE FUNCTION fun_sessione_dopo_inizio_corso()
RETURNS TRIGGER AS
$$
DECLARE
	data_inizio Corso.DataInizio%TYPE;
BEGIN
	SELECT DataInizio INTO data_inizio FROM Corso WHERE IdCorso = NEW.IdCorso;
	IF NEW.Data < data_inizio THEN
		RAISE EXCEPTION 'La sessione non può essere precedente alla data di inizio del corso';
	END IF;

	IF NOT EXISTS
				(
				   SELECT 1 FROM SessionePratica WHERE IdCorso = NEW.IdCorso
				   UNION
				   SELECT 1 FROM SessioneOnline WHERE IdCorso = NEW.IdCorso
				)
	THEN 
		IF NEW.Data <> data_inizio THEN
			RAISE EXCEPTION 'La prima sessione del corso deve essere il giorno della Data di inizio del corso';
		END IF;
	END IF;

	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_sessione_pratica_dopo_inizio_corso
BEFORE INSERT OR UPDATE OF Data ON SessionePratica
FOR EACH ROW
EXECUTE FUNCTION fun_sessione_dopo_inizio_corso();

CREATE OR REPLACE TRIGGER trg_sessione_online_dopo_inizio_corso
BEFORE INSERT OR UPDATE OF Data ON SessioneOnline
FOR EACH ROW
EXECUTE FUNCTION fun_sessione_dopo_inizio_corso();
-----------------------------------------------------------------------------------------------------------------------
--Controllare che il  numero di sessioni non venga mai raggiunto

CREATE OR REPLACE FUNCTION fun_max_sessioni_per_corso()
RETURNS TRIGGER AS
$$
DECLARE
	num_esistenti INTEGER;
	max_consentite INTEGER;
BEGIN
	SELECT NumeroSessioni INTO max_consentite FROM Corso WHERE IdCorso = NEW.IdCorso;

	SELECT COUNT(*) INTO num_esistenti 
	FROM (
			SELECT IdCorso FROM SessionePratica WHERE IdCorso = NEW.IdCorso
			UNION ALL
			SELECT IdCorso FROM SessioneOnline WHERE IdCorso = NEW.IdCorso
		     ) AS tot_sessioni;

	IF num_esistenti >= max_consentite THEN
		RAISE EXCEPTION 'È stato già raggiunto il numero massimo di sessioni per questo corso';
	END IF;

	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_max_sessioni_pratica
BEFORE INSERT ON SessionePratica
FOR EACH ROW
EXECUTE FUNCTION fun_max_sessioni_per_corso();

CREATE OR REPLACE TRIGGER trg_max_sessioni_online
BEFORE INSERT ON SessioneOnline
FOR EACH ROW
EXECUTE FUNCTION fun_max_sessioni_per_corso();

-----------------------------------------------------------------------------------------------------------------------
-- Interrelazionale: Quando inserisco o modifico una sessione  deve rispettare l'intervallo della frequenza 

CREATE OR REPLACE FUNCTION fun_verifica_frequenza_sessioni()
RETURNS TRIGGER AS
$$
DECLARE
	frequenza Corso.FrequenzaSessioni%TYPE;
	giorni_intervallo INTEGER;
	data_prec SessionePratica.Data%TYPE; diff_prec INTEGER;
	data_succ SessionePratica.Data%TYPE; diff_succ  INTEGER;
BEGIN
	-- Prendo la frequenza del corso
	SELECT FrequenzaSessioni INTO frequenza FROM CORSO WHERE IDCorso = NEW.IdCorso;
	
	CASE frequenza
		WHEN 'Giornaliera' THEN giorni_intervallo := 1;
		WHEN 'Settimanale' THEN giorni_intervallo := 7;
		WHEN 'Bisettimanale' THEN giorni_intervallo := 14;
		WHEN 'Mensile' THEN giorni_intervallo := 30;
		WHEN 'Libera' THEN RETURN NEW;
		ELSE
			RAISE EXCEPTION 'Frequenza non riconosciuta';
	END CASE;

	-- Sessione Precedente
	SELECT MAX(Data) INTO data_prec
	FROM
		     ( 
			 SELECT Data FROM SessionePratica WHERE IdCorso = NEW.IdCorso AND Data < NEW.Data 
			 UNION ALL
			 SELECT Data FROM SessioneOnline WHERE IdCorso = NEW.IDCorso AND Data < NEW.Data
		     )  AS Sessioni_Precedenti;

	-- Sessione Successiva
	SELECT MIN(Data) INTO data_succ
	FROM
		     ( 
			 SELECT Data FROM SessionePratica WHERE IdCorso = NEW.IdCorso AND Data > NEW.Data 
			 UNION ALL
			 SELECT Data FROM SessioneOnline WHERE IdCorso = NEW.IDCorso AND Data > NEW.Data
		     )  AS Sessioni_Successive;

	-- Verifico distanza dalla precedente
	IF data_prec IS NOT NULL THEN
		diff_prec := NEW.Data - data_prec;
		IF diff_prec < giorni_intervallo THEN
			RAISE EXCEPTION 'Violazione frequenza: La nuova sessione è troppo vicina a quella precedente';
		END IF;
	END IF;

	-- Verifico distanza dalla successiva
	IF data_succ IS NOT NULL THEN
		diff_succ := data_succ - NEW.Data;
		IF diff_succ < giorni_intervallo THEN
			RAISE EXCEPTION 'Violazione frequenza: La nuova sessione è troppo vicina a quella successiva';
		END IF;
	END IF;

	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_verifica_frequenza_sessioni_pratiche
BEFORE INSERT OR UPDATE OF Data ON SessionePratica
FOR EACH ROW
EXECUTE FUNCTION fun_verifica_frequenza_sessioni();

CREATE OR REPLACE TRIGGER trg_verifica_frequenza_sessioni_online
BEFORE INSERT OR UPDATE OF Data ON SessioneOnline
FOR EACH ROW
EXECUTE FUNCTION fun_verifica_frequenza_sessioni();

-----------------------------------------------------------------------------------------------------------------------

-- Interrelazionale: Un utente non puo' partecipare a una sessione pratica se non iscritto al corso che la organizza

CREATE OR REPLACE FUNCTION fun_iscrizione_before_adesione()
RETURNS TRIGGER AS
$$
DECLARE
    	idcorso_sessione SessionePratica.IdCorso%TYPE;

BEGIN

    	SELECT IdCorso INTO idcorso_sessione
    	FROM SessionePratica
    	WHERE IdSessionePratica = NEW.IdSessionePratica;

	IF NOT EXISTS ( SELECT 1 FROM Iscrizioni WHERE IdPartecipante = NEW.IdPartecipante AND IdCorso = idcorso_sessione ) THEN
    		RAISE EXCEPTION 'Partecipante non iscritto al corso, impossibile aderire alla sessione pratica';
	END IF;
    	RETURN NEW;

END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_iscrizione_before_adesione
BEFORE INSERT OR UPDATE ON Adesioni
FOR EACH ROW
EXECUTE FUNCTION fun_iscrizione_before_adesione();

-----------------------------------------------------------------------------------------------------------------------

-- BUSINESS IntraRelazionale: Gli argomenti del corso non possono essere più di 5

CREATE OR REPLACE FUNCTION fun_limit_argomenti()
RETURNS TRIGGER AS
$$
DECLARE
    	num_argomenti INTEGER;

BEGIN
	
	SELECT COUNT(*) INTO num_argomenti FROM Argomenti_Corso WHERE IdCorso = NEW.IdCorso;

	IF num_argomenti >= 5 THEN
		RAISE EXCEPTION 'E'' gia'' stato scelto il numero massimo di argomenti per questo corso'; 
    	END IF;
    	RETURN NEW;

END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_limit_argomenti
BEFORE INSERT OR UPDATE ON Argomenti_Corso
FOR EACH ROW
EXECUTE FUNCTION fun_limit_argomenti();

-----------------------------------------------------------------------------------------------------------------------

-- Interrelazionale: Lo chef non può usare ricette nelle sessioni pratiche che non sono sue

CREATE OR REPLACE FUNCTION fun_ricette_chef_sessione()
RETURNS TRIGGER AS
$$
DECLARE
	id1 Chef.IdChef%TYPE;
	id2 Chef.IdChef%TYPE;
BEGIN
	SELECT IdChef INTO id1 FROM Preparazioni NATURAL JOIN Ricetta WHERE IdRicetta = NEW.IdRicetta;

	SELECT IdChef INTO id2 FROM Preparazioni NATURAL JOIN SessionePratica NATURAL JOIN Corso WHERE IdSessionePratica = NEW.IdSessionePratica;
	
	IF id1 <> id2 THEN
		RAISE EXCEPTION 'Non si possono inserire ricette che non sono dello chef';
	END IF;
	RETURN NEW;

END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_ricette_chef_sessione
BEFORE INSERT OR UPDATE ON Preparazioni
FOR EACH ROW
EXECUTE FUNCTION fun_ricette_chef_sessione();

-----------------------------------------------------------------------------------------------------------------------

-- Il Codice Fiscale non è modificabile una volta creato l'utente

CREATE OR REPLACE FUNCTION fun_blocca_aggiorna_utente()
RETURNS TRIGGER AS
$$
BEGIN
	RAISE EXCEPTION 'Non puoi modificare il tuo codice fiscale!!!';
	RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_blocca_aggiorna__chef
BEFORE UPDATE OF CodiceFiscale ON Chef 
FOR EACH ROW
EXECUTE FUNCTION fun_blocca_aggiorna_utente();

CREATE OR REPLACE TRIGGER trg_blocca_aggiorna_partecipante
BEFORE UPDATE OF CodiceFiscale ON Partecipante
FOR EACH ROW
EXECUTE FUNCTION fun_blocca_aggiorna_utente();

-----------------------------------------------------------------------------------------------------------------------

-- Non si può modificare o eliminare un argomento

CREATE OR REPLACE FUNCTION fun_blocca_aggiorna_argomento()
RETURNS TRIGGER AS
$$
BEGIN
	RAISE EXCEPTION 'Non puoi modificare o cancellare un argomento!!!';
	RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_blocca_aggiorna_argomento
BEFORE DELETE OR UPDATE  OF Nome ON Argomento
FOR EACH ROW
EXECUTE  FUNCTION fun_blocca_aggiorna_argomento();

-----------------------------------------------------------------------------------------------------------------------

-- Non posso inserire una sessione pratica se ispratico  = false 

CREATE OR REPLACE FUNCTION fun_ispratico_insert()
RETURNS TRIGGER AS
$$
DECLARE
	pratico Corso.isPratico%TYPE;
BEGIN
	SELECT isPratico INTO pratico FROM Corso WHERE IdCorso = NEW.IdCorso;

	IF NOT pratico THEN
		RAISE EXCEPTION 'Non puoi inserire una sessione pratica in un corso non pratico!!!';
	END IF;
	RETURN NEW;
	
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_ispratico_insert
BEFORE INSERT ON SessionePratica
FOR EACH ROW
EXECUTE FUNCTION fun_ispratico_insert();

-----------------------------------------------------------------------------------------------------------------------

-- Del corso non  è possibile aggiornare IdCorso, Nome, FrequenzaSessioni, Costo, IdChef

CREATE OR REPLACE FUNCTION fun_blocca_aggiorna_corso()
RETURNS TRIGGER AS
$$
BEGIN
    RAISE EXCEPTION 'Non puoi modificare i campi IdCorso, Nome, NumeroSessioni, FrequenzaSessioni, Costo o IdChef.';
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_blocca_aggiorna_corso
BEFORE UPDATE  OF IdCorso, Nome, NumeroSessioni, FrequenzaSessioni, Costo, IdChef ON Corso
FOR EACH ROW
EXECUTE FUNCTION fun_blocca_aggiorna_corso();

-----------------------------------------------------------------------------------------------------------------------

-- Della ricetta non è possibile aggiornare IdRicetta e IdChef

CREATE OR REPLACE FUNCTION fun_blocca_aggiorna_ricetta()
RETURNS TRIGGER AS 
$$
BEGIN
 	RAISE EXCEPTION 'Non puoi modificare i campi IdRicetta e IdChef.';
	RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_blocca_aggiorna_ricetta
BEFORE UPDATE  OF IdRicetta, IdChef ON Ricetta
FOR EACH ROW
EXECUTE FUNCTION fun_blocca_aggiorna_ricetta();

-----------------------------------------------------------------------------------------------------------------------

-- Delle sessioni non è possibile aggiornare IdSessione(pratica,online) e IdCorso

CREATE OR REPLACE FUNCTION fun_blocca_aggiorna_sessioni()
RETURNS TRIGGER AS
$$
BEGIN
 	RAISE EXCEPTION 'Non puoi modificare i campi IdSessione e IdCorso.';
	RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_blocca_aggiorna_sessioni_online
BEFORE UPDATE  OF IdSessioneOnline, IdCorso On SessioneOnline
FOR EACH ROW
EXECUTE FUNCTION fun_blocca_aggiorna_sessioni();

CREATE OR REPLACE TRIGGER trg_blocca_aggiorna_sessioni_pratiche
BEFORE UPDATE  OF IdSessionePratica, IdCorso ON SessionePratica
FOR EACH ROW
EXECUTE FUNCTION fun_blocca_aggiorna_sessioni();

-----------------------------------------------------------------------------------------------------------------------
Degli Ingredienti non deve essere possibile aggiornare IdIngrediente, Nome, Origine

CREATE OR REPLACE FUNCTION fun_blocca_aggiorna_ingrediente()
RETURNS TRIGGER AS
$$
BEGIN
	RAISE EXCEPTION 'Non puoi modificare o cancellare un ingrediente!!!';
	RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_blocca_aggiorna_ingrediente
BEFORE DELETE OR UPDATE  OF IdIngrediente, Nome, Origine ON Ingrediente
FOR EACH ROW
EXECUTE  FUNCTION fun_blocca_aggiorna_ingrediente();
-----------------------------------------------------------------------------------------------------------------------

-- Non deve essere possibile aggiornare le  iscrizioni

CREATE OR REPLACE FUNCTION fun_blocca_aggiorna_iscrizioni()
RETURNS TRIGGER AS
$$
BEGIN
 	RAISE EXCEPTION 'Non puoi modificare i campi IdPartecipante, IdCorso.';
	RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_blocca_aggiorna_iscrizioni
BEFORE UPDATE  OF IdPartecipante, IdCorso  ON Iscrizioni
FOR EACH ROW
EXECUTE FUNCTION fun_blocca_aggiorna_iscrizioni();

-----------------------------------------------------------------------------------------------------------------------

-- Non deve essere possibile aggiornare gli argomenti_corso

CREATE OR REPLACE FUNCTION fun_blocca_aggiorna_argomenticorso()
RETURNS TRIGGER AS
$$
BEGIN
 	RAISE EXCEPTION 'Non puoi modificare i campi IdCorso, IdArgomento.';
	RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_blocca_aggiorna_argomenticorso
BEFORE UPDATE  OF IdCorso, IdArgomento ON Argomenti_Corso
FOR EACH ROW
EXECUTE FUNCTION fun_blocca_aggiorna_argomenticorso();

-----------------------------------------------------------------------------------------------------------------------

-- Non deve essere possibile aggiornare le adesioni

CREATE OR REPLACE FUNCTION fun_blocca_aggiorna_adesioni()
RETURNS TRIGGER AS
$$
BEGIN
 	RAISE EXCEPTION 'Non puoi modificare i campi IdPartecipante, IdSessionePratica, DataAdesione.';
	RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_blocca_aggiorna_adesioni
BEFORE UPDATE  OF IdPartecipante, IdSessionePratica, DataAdesione ON Adesioni
FOR EACH ROW
EXECUTE FUNCTION fun_blocca_aggiorna_adesioni();

-----------------------------------------------------------------------------------------------------------------------

-- Si può eliminare una adesione a una sessione pratica fino a 3 giorni prima in cui essa avviene

CREATE OR REPLACE FUNCTION fun_blocca_cancella_adesioni()
RETURNS TRIGGER AS
$$
DECLARE 
	data_sessione SessionePratica.Data%TYPE;
BEGIN
 	SELECT Data INTO data_sessione FROM SessionePratica WHERE IdSessionePratica = OLD.IdSessionePratica;
	
	IF data_sessione - CURRENT_DATE <= 2 THEN
		 RAISE EXCEPTION ' Non puoi cancellare una adesione a meno di 3 giorni dalla sessione pratica!';
	ENDIF;
	RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_blocca_cancella_adesioni
BEFORE DELETE ON Adesioni
FOR EACH ROW
EXECUTE FUNCTION fun_blocca_cancella_adesioni();

-----------------------------------------------------------------------------------------------------------------------

-- Non deve essere possibile aggiornare le preparazioni

CREATE OR REPLACE FUNCTION fun_blocca_aggiorna_preparazioni()
RETURNS TRIGGER AS
$$
BEGIN
 	RAISE EXCEPTION 'Non puoi modificare i campi IdSessionePratica, IdRicetta.';
	RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_blocca_aggiorna_preparazioni
BEFORE UPDATE  OF IdSessionePratica, IdRicetta ON Preparazioni
FOR EACH ROW
EXECUTE FUNCTION fun_blocca_aggiorna_preparazioni();

-----------------------------------------------------------------------------------------------------------------------

-- Non deve essere possibile aggiornare gli utilizzi

CREATE OR REPLACE FUNCTION fun_blocca_aggiorna_utilizzi()
RETURNS TRIGGER AS
$$
BEGIN
 	RAISE EXCEPTION 'Non puoi modificare i campi  IdRicetta, IdIngrediente.';
	RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER trg_blocca_aggiorna_utilizzi
BEFORE UPDATE  OF IdRicetta, IdIngrediente ON Utilizzi
FOR EACH ROW
EXECUTE FUNCTION fun_blocca_aggiorna_utilizzi();